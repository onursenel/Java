package com.onursenel.ninjabirdstarter;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Audio;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.Circle;
import com.badlogic.gdx.math.Intersector;


import java.util.Random;

public class NinjaBird extends ApplicationAdapter {
	SpriteBatch batch ;
	Texture background;
	Texture bird;
	Texture trap1;
	Texture trap2;
	Texture trap3;
	float birdX;
	float birdY;
	int gameState = 0 ;
	float velocity=0 ;
	float gravity=1;
	float enemyVelocity=7;
	Random random;
	int score=0;
	int bestScore=0;
	int scoredEnemy=0;
	BitmapFont font;
	BitmapFont font2;
	BitmapFont font3;


	Circle birdCircle;
	ShapeRenderer shapeRenderer;



	int numberOfEnemies=4;
	float[] enemyX=new float[numberOfEnemies];
	float[] enemyOffSet= new float[numberOfEnemies];
	float[] enemyOffSet2=new float[numberOfEnemies];
	float[] enemyOffSet3=new float[numberOfEnemies];
	float distance=0;

	Circle[] enemyCircles;
	Circle[] enemyCircles2;
	Circle[] enemyCircles3;




	
	@Override
	public void create () {
		batch = new SpriteBatch();
		background = new Texture("airadventurelevel4.png");
		bird= new Texture("NicePng_angry-bird-png_768701.png");
		trap1=new Texture("pngwing.com.png");
		trap2=new Texture("pngwing.com.png");
		trap3=new Texture("pngwing.com.png");
		distance=Gdx.graphics.getWidth()/2;
		random=new Random();




		birdX=Gdx.graphics.getWidth()/4;
		birdY=Gdx.graphics.getHeight()/2;
		shapeRenderer=new ShapeRenderer();

		birdCircle = new Circle();
		enemyCircles=new Circle[numberOfEnemies];
		enemyCircles2=new Circle[numberOfEnemies];
		enemyCircles3=new Circle[numberOfEnemies];

		font=new BitmapFont();
		font.setColor(Color.RED);
		font.getData().setScale(4);

		font2=new BitmapFont();
		font2.setColor(Color.GREEN);
		font2.getData().setScale(6);

		font3=new BitmapFont();
		font.setColor(Color.RED);
		font3.getData().setScale(4);




		for(int i=0 ; i<numberOfEnemies;i++){

			enemyOffSet[i]=(random.nextFloat()-0.5f)*(Gdx.graphics.getHeight()-200);
			enemyOffSet2[i]=(random.nextFloat()-0.5f)*(Gdx.graphics.getHeight()-200);
			enemyOffSet3[i]=(random.nextFloat()-0.5f)*(Gdx.graphics.getHeight()-200);

			enemyX[i]=Gdx.graphics.getWidth()-trap1.getWidth()/2+i*distance;

			enemyCircles[i]=new Circle();
			enemyCircles2[i]=new Circle();
			enemyCircles3[i]=new Circle();
		}



	}

	@Override
	public void render () {
		batch.begin();
		batch.draw(background,0,0,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());

		if(gameState==1){

			if(enemyX[scoredEnemy]<Gdx.graphics.getWidth()/4){
				score++;
				if(score>bestScore){
					bestScore++;
					if(score==5){
						enemyVelocity++;
					}
					else if(score==10){
						enemyVelocity+=2;
					}
					else if(score==15){
						enemyVelocity+=3;
					}

				}


				if(scoredEnemy<numberOfEnemies-1){
					scoredEnemy++;
				}else{
					scoredEnemy=0;
				}
			}
			if(Gdx.input.justTouched()){

				velocity=-16;
			}

			for (int i=0; i<numberOfEnemies;i++){
				if(enemyX[i]<Gdx.graphics.getWidth()/15){
					enemyX[i]=enemyX[i]+numberOfEnemies*distance;
					enemyOffSet[i]=(random.nextFloat()-0.5f)*(Gdx.graphics.getHeight()-100);
					enemyOffSet2[i]=(random.nextFloat()-0.5f)*(Gdx.graphics.getHeight()-100);
					enemyOffSet3[i]=(random.nextFloat()-0.5f)*(Gdx.graphics.getHeight()-100);

				}else{
					enemyX[i]=enemyX[i]-enemyVelocity;
				}

				batch.draw(trap1,enemyX[i],Gdx.graphics.getHeight()/2+enemyOffSet[i],Gdx.graphics.getWidth()/10,Gdx.graphics.getHeight()/4);
				batch.draw(trap2,enemyX[i],Gdx.graphics.getHeight()/2+enemyOffSet2[i],Gdx.graphics.getWidth()/10,Gdx.graphics.getHeight()/4);
				batch.draw(trap3,enemyX[i],Gdx.graphics.getHeight()/2+enemyOffSet3[i],Gdx.graphics.getWidth()/10,Gdx.graphics.getHeight()/4);

				enemyCircles[i]=new Circle(enemyX[i]+Gdx.graphics.getWidth()/20,Gdx.graphics.getHeight()/2+enemyOffSet[i]+Gdx.graphics.getHeight()/8,Gdx.graphics.getWidth()/20);
				enemyCircles2[i]=new Circle(enemyX[i]+Gdx.graphics.getWidth()/20,Gdx.graphics.getHeight()/2+enemyOffSet2[i]+Gdx.graphics.getHeight()/8,Gdx.graphics.getWidth()/20);
				enemyCircles3[i]=new Circle(enemyX[i]+Gdx.graphics.getWidth()/20,Gdx.graphics.getHeight()/2+enemyOffSet3[i]+Gdx.graphics.getHeight()/8,Gdx.graphics.getWidth()/20);

			}


			if(birdY>0 && birdY<Gdx.graphics.getHeight()){
				velocity=velocity+gravity;
				birdY=birdY-velocity;
			}else{
				gameState=2;
			}


		}else if (gameState==0){
			if(Gdx.input.justTouched()){
				gameState=1;
			}
		}else if(gameState==2){

			font2.draw(batch,"Oyun bitti! Tekrar baslamak iÃ§in dokunun",100,Gdx.graphics.getHeight()/2);

			if(Gdx.input.justTouched()){
				gameState=1;
				birdY=Gdx.graphics.getHeight()/2;
				for(int i=0 ; i<numberOfEnemies;i++){

					enemyOffSet[i]=(random.nextFloat()-0.5f)*(Gdx.graphics.getHeight()-200);
					enemyOffSet2[i]=(random.nextFloat()-0.5f)*(Gdx.graphics.getHeight()-200);
					enemyOffSet3[i]=(random.nextFloat()-0.5f)*(Gdx.graphics.getHeight()-200);

					enemyX[i]=Gdx.graphics.getWidth()-trap1.getWidth()/2+i*distance;

					enemyCircles[i]=new Circle();
					enemyCircles2[i]=new Circle();
					enemyCircles3[i]=new Circle();
				}

				velocity=0;
				scoredEnemy=0;
				score=0;
				enemyVelocity=7;

			}
		}


		batch.draw(bird,birdX,birdY,Gdx.graphics.getWidth()/15,Gdx.graphics.getHeight()/10);

		font.draw(batch,"skor:"+String.valueOf(score),100,200);
		font.draw(batch,"en yuksek skor:"+String.valueOf(bestScore),100,100);


		batch.end();
		birdCircle.set(birdX+Gdx.graphics.getWidth()/30,birdY+Gdx.graphics.getHeight()/20,Gdx.graphics.getWidth()/30);
		//shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
		//shapeRenderer.setColor(Color.BLUE);
		//shapeRenderer.circle(birdCircle.x,birdCircle.y,birdCircle.radius);



		for(int i = 0;i<numberOfEnemies;i++){
			//shapeRenderer.circle(enemyX[i]+Gdx.graphics.getWidth()/20,Gdx.graphics.getHeight()/2+enemyOffSet[i]+Gdx.graphics.getHeight()/8,Gdx.graphics.getWidth()/20);
			//shapeRenderer.circle(enemyX[i]+Gdx.graphics.getWidth()/20,Gdx.graphics.getHeight()/2+enemyOffSet2[i]+Gdx.graphics.getHeight()/8,Gdx.graphics.getWidth()/20);shapeRenderer.circle(enemyX[i]+Gdx.graphics.getWidth()/20,Gdx.graphics.getHeight()/2+enemyOffSet3[i]+Gdx.graphics.getHeight()/8,Gdx.graphics.getWidth()/20);

			if(Intersector.overlaps(birdCircle,enemyCircles[i]) || Intersector.overlaps(birdCircle,enemyCircles2[i]) || Intersector.overlaps(birdCircle,enemyCircles3[i])) {
				gameState = 2;
			}

		}
		//shapeRenderer.end();


	}
	
	@Override
	public void dispose () {

	}
}
